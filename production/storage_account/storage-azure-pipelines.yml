variables:
- group: terraform-azure-prod

parameters:
  - name: terraformVersion
    type: string
    default: 'latest'

trigger:
- none

stages:

- stage: 'ProdEnvironmentStorage'
  dependsOn: []
  displayName: Prod Environment Storage

  jobs:
    - job: 'TerraformInitPlan_Storage'
      displayName: 'Initialize and Plan Terraform for Prod Environment Storage'
      pool: 'Azure Pipelines'

      steps:
        - checkout: self

        - task: TerraformInstaller@1
          displayName: 'Terraform Install'
          inputs:
            terraformVersion: ${{ parameters.terraformVersion }}

        - task: replacetokens@5
          inputs:
            rootDirectory: '$(System.DefaultWorkingDirectory)/production/storage_account/'
            targetFiles: '**/*.tfvars'
            encoding: 'auto'
            tokenPattern: 'default'
            writeBOM: true
            actionOnMissing: 'warn'
            enableTelemetry: false

        - task: TerraformCLI@1
          displayName: 'Prod Storage Terraform Init'
          inputs:
            backendType: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/production/storage_account/'
            backendServiceArm: '$(backendServiceArm)'
            backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
            backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
            backendAzureRmContainerName: '$(backendAzureRmContainerName)'
            backendAzureRmKey: 'prod.storage.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@1
          displayName: 'Prod Storage Terraform Plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/production/storage_account/'
            commandOptions: '-out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: '$(backendServiceArm)'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/production/storage_account/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true

        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'prod-storage-plan'

- stage: 'ProdEnvironmentStorageApply'
  dependsOn: 'ProdEnvironmentStorage'
  displayName: Prod Environment Storage Apply

  jobs:
    - deployment: 'TerraformApply_Storage'
      displayName: 'Apply Terraform for Prod Environment Storage'
      pool: 'Self-Hosted'
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self

              - task: TerraformInstaller@1
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/prod-storage-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/production/storage_account/'
                  cleanDestinationFolder: true

              - task: TerraformCLI@1
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/production/storage_account/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: '$(backendServiceArm)'
                  allowTelemetryCollection: false
