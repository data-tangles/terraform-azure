resources:
  repositories:
    - repository: 'TerraformVars'
      type: github
      endpoint: qman-being
      name: qman-being/terraform-vars

parameters:
  - name: terraformVersion
    type: string
    default: 'latest'

trigger:
- none

stages:

- stage: 'ProdEnvironmentNetworking'
  dependsOn: []
  displayName: Prod Environment Networking

  jobs:
    - job: 'TerraformInitPlan_Networking'
      displayName: 'Initialize and Plan Terraform for Prod Environment Networking'
      pool: 'Azure Pipelines'
      
      steps:
        - checkout: self
        - checkout: TerraformVars

        - task: TerraformInstaller@0
          displayName: 'Terraform Install'
          inputs:
            terraformVersion: ${{ parameters.terraformVersion }}
            
        - task: TerraformCLI@0
          displayName: 'Prod Networking Terraform Init'
          inputs:
            command: 'init'
            backendType: 'azurerm'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/01_vnet_subnet_nsg'
            backendServiceArm: 'Visual Studio Enterprise Subscription - MPN'
            backendAzureRmResourceGroupName: 'rg-storage-prod-san-01'
            backendAzureRmStorageAccountName: 'stprodtfsan01'
            backendAzureRmContainerName: 'prod-tfstate'
            backendAzureRmKey: 'prod.networking.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@0
          displayName: 'Prod Networking Terraform Plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/01_vnet_subnet_nsg/'
            commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform-vars/variables/terraform-azure/vnet_subnet_nsg/prod.tfvars" -out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform-azure/01_vnet_subnet_nsg/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true

        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'prod-networking-plan'
            
- stage: 'ProdEnvironmentNetworkingApply'
  dependsOn: 'ProdEnvironmentNetworking'
  displayName: Prod Environment Networking Apply
  
  jobs:          
    - deployment: 'TerraformApply_Networking'
      displayName: 'Apply Terraform for Prod Environment Networking'
      pool: 'Azure Pipelines'
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: TerraformVars

              - task: TerraformInstaller@0
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/prod-networking-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/terraform-azure/01_vnet_subnet_nsg/'
                  cleanDestinationFolder: true

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/01_vnet_subnet_nsg/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
                  allowTelemetryCollection: false
            
- stage: 'ProdEnvironmentKeyVault'
  dependsOn: []
  displayName: Prod Environment Key Vault
  
  jobs:          
    - job: 'TerraformInitPlan_KeyVault'
      displayName: 'Initialize and Plan Terraform for Prod Environment Key Vault'
      pool: 'Azure Pipelines'
      
      steps:
        - checkout: self
        - checkout: TerraformVars

        - task: TerraformCLI@0
          displayName: 'Prod Key Vault Terraform Init'
          inputs:
            command: 'init'
            backendType: 'azurerm'
            workingDirectory: '$(System.DefaultWorkingDirectory)/02_key_vault'
            backendServiceArm: 'Visual Studio Enterprise Subscription - MPN'
            backendAzureRmResourceGroupName: 'rg-storage-prod-san-01'
            backendAzureRmStorageAccountName: 'stprodtfsan01'
            backendAzureRmContainerName: 'prod-tfstate'
            backendAzureRmKey: 'prod.keyvault.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@0
          displayName: 'Prod Key Vault Terraform Plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/02_key_vault/'
            commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform-vars/variables/terraform-azure/key_vault/prod.tfvars" -out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform-azure/02_key_vault/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true
  
        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'prod-keyvault-plan'
            
- stage: 'ProdEnvironmentKeyVaultApply'
  dependsOn: 'ProdEnvironmentKeyVault'
  displayName: Prod Environment Key Vault Apply
  
  jobs:          
    - deployment: 'TerraformApply_KeyVault'
      displayName: 'Apply Terraform for Prod Environment Key Vault'
      pool: 'Azure Pipelines'
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: TerraformVars

              - task: TerraformInstaller@0
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/prod-keyvault-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/terraform-azure/02_key_vault/'
                  cleanDestinationFolder: false

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/02_key_vault/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
                  allowTelemetryCollection: false
            
- stage: 'ProdEnvironmentLinuxVM'
  dependsOn: []
  displayName: Prod Environment Linux VM

  jobs:          
    - job: 'TerraformInitPlan_LinuxVM'
      displayName: 'Initialize and Plan Terraform for Prod Environment Linux VM'
      pool: 'Azure Pipelines'
      steps:
        - checkout: self
        - checkout: TerraformVars

        - task: TerraformCLI@0
          displayName: 'Prod Linux VM Terraform Init'
          inputs:
            backendType: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/virtual_machine/linux/'
            backendServiceArm: 'Visual Studio Enterprise Subscription - MPN'
            backendAzureRmResourceGroupName: 'rg-storage-prod-san-01'
            backendAzureRmStorageAccountName: 'stprodtfsan01'
            backendAzureRmContainerName: 'prod-tfstate'
            backendAzureRmKey: 'prod.virtualmachines.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@0
          displayName: 'Prod Linux VM Terraform Plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/virtual_machine/linux/'
            commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform-vars/variables/terraform-azure/virtual_machine/linux/prod.tfvars" -out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform-azure/virtual_machine/linux/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true
    
        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'prod-linuxvm-plan'
            
- stage: 'ProdEnvironmentLinuxVMApply'
  dependsOn: 'ProdEnvironmentLinuxVM'
  displayName: Prod Environment Linux VM Apply
  
  jobs:          
    - deployment: 'TerraformApply_LinuxVM'
      displayName: 'Apply Terraform for Prod Environment Linux VM'
      pool: 'Azure Pipelines'
      environment: Prod
      strategy:
        runOnce:
          deploy:     
            steps:
              - checkout: self
              - checkout: TerraformVars

              - task: TerraformInstaller@0
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/prod-linuxvm-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/terraform-azure/virtual_machine/linux/'
                  cleanDestinationFolder: false

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/virtual_machine/linux/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
                  allowTelemetryCollection: false

- stage: 'ProdEnvironmentWindowsVM'
  dependsOn: []
  displayName: Prod Environment Windows VM

  jobs:
    - job: 'TerraformInitPlan_WindowsVM'
      displayName: 'Initialize and Plan Terraform for Prod Environment Windows VM'
      pool: 'Azure Pipelines'
      
      steps:
        - checkout: self
        - checkout: TerraformVars

        - task: TerraformCLI@0
          displayName: 'Prod Windows VM Terraform Init'
          inputs:
            backendType: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/virtual_machine/windows/'
            backendServiceArm: 'Visual Studio Enterprise Subscription - MPN'
            backendAzureRmResourceGroupName: 'rg-storage-prod-san-01'
            backendAzureRmStorageAccountName: 'stprodtfsan01'
            backendAzureRmContainerName: 'prod-tfstate'
            backendAzureRmKey: 'prod.virtualmachines.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@0
          displayName: 'Prod Windows VM Terraform Plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/virtual_machine/windows/'
            commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform-vars/variables/terraform-azure/virtual_machine/windows/prod.tfvars" -out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform-azure/virtual_machine/windows/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true
      
        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'prod-windowsvm-plan'

- stage: 'ProdEnvironmentWindowsVMApply'
  dependsOn: 'ProdEnvironmentWindowsVM'
  displayName: Prod Environment Windows VM Apply
  
  jobs:          
    - deployment: 'TerraformApply_WindowsVM'
      displayName: 'Apply Terraform for Prod Environment Windows VM'
      pool: 'Azure Pipelines'
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: TerraformVars

              - task: TerraformInstaller@0
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/prod-windowsvm-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/terraform-azure/virtual_machine/windows/'
                  cleanDestinationFolder: false

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/virtual_machine/windows/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
                  allowTelemetryCollection: false

- stage: 'ProdEnvironmentStorage'
  dependsOn: []
  displayName: Prod Environment Storage

  jobs:
    - job: 'TerraformInitPlan_Storage'
      displayName: 'Initialize and Plan Terraform for Prod Environment Storage'
      pool: 'Azure Pipelines'
      
      steps:
        - checkout: self
        - checkout: TerraformVars
        
        - task: TerraformCLI@0
          displayName: 'Prod Storage Terraform Init'
          inputs:
            backendType: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/storage_account/'
            backendServiceArm: 'Visual Studio Enterprise Subscription - MPN'
            backendAzureRmResourceGroupName: 'rg-storage-prod-san-01'
            backendAzureRmStorageAccountName: 'stprodtfsan01'
            backendAzureRmContainerName: 'prod-tfstate'
            backendAzureRmKey: 'prod.storage.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@0
          displayName: 'Prod Storage Terraform Plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/storage_account/'
            commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform-vars/variables/terraform-azure/storage/prod.tfvars" -out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform-azure/storage_account/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true
      
        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'prod-storage-plan'

- stage: 'ProdEnvironmentStorageApply'
  dependsOn: 'ProdEnvironmentStorage'
  displayName: Prod Environment Storage Apply
  
  jobs:          
    - deployment: 'TerraformApply_Storage'
      displayName: 'Apply Terraform for Prod Environment Storage'
      pool: 'Azure Pipelines'
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: TerraformVars

              - task: TerraformInstaller@0
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/prod-storage-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/terraform-azure/storage_account/'
                  cleanDestinationFolder: true

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-azure/storage_account/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: 'Visual Studio Enterprise Subscription - MPN'
                  allowTelemetryCollection: false
      
