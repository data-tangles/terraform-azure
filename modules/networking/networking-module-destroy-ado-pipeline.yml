variables:
  - group: terraform-azure
  - group: terraform_azure_networking_module

parameters:
  - name: terraformVersion
    type: string
    default: 'latest'

trigger:
- none

stages:

- stage: 'NetworkingModuleDestroy'
  dependsOn: []
  displayName: Networking Module Destroy

  jobs:
    - job: 'TerraformInitPlan_NetworkingModuleDestroy'
      displayName: 'Initialize and Plan Terraform for Networking Module Destroy' 
      pool: 'Azure Pipelines'
      
      steps:
        - checkout: self

        - task: TerraformInstaller@1
          displayName: 'Terraform Install'
          inputs:
            terraformVersion: ${{ parameters.terraformVersion }}

        - task: replacetokens@5
          inputs:
            rootDirectory: '$(System.DefaultWorkingDirectory)/modules/networking/'
            targetFiles: '**/*.tfvars'
            encoding: 'auto'
            tokenPattern: 'default'
            writeBOM: true
            actionOnMissing: 'warn'
            enableTelemetry: false
            
        - task: TerraformCLI@1
          displayName: 'Networking Module Terraform Init'
          inputs:
            command: 'init'
            backendType: 'azurerm'
            workingDirectory: '$(System.DefaultWorkingDirectory)/modules/networking/'
            backendServiceArm: '$(backendServiceArm)'
            backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
            backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
            backendAzureRmContainerName: 'lab-tfstate'
            backendAzureRmKey: 'networking.terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@1
          displayName: 'Networking Module Terraform Plan Destroy'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/modules/networking/'
            commandOptions: '-destroy -out ${BUILD_BUILDNUMBER}.tfplan'
            environmentServiceName: '$(backendServiceArm)'
            allowTelemetryCollection: false

        - task: ArchiveFiles@2
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/modules/networking/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
            replaceExistingArchive: true

        - task: PublishPipelineArtifact@1
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          displayName: 'Publish Plan Artifact'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'networking-module-plan'
            
- stage: 'NetworkingModuleApplyDestroy'
  dependsOn: 'NetworkingModuleDestroy'
  displayName: Networking Module Apply Destroy
  
  jobs:          
    - deployment: 'TerraformApply_Networking'
      displayName: 'Apply Terraform for Networking Module Destroy'
      pool: 'Azure Pipelines'
      environment: Lab
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self

              - task: TerraformInstaller@1
                displayName: 'Terraform Install'
                inputs:
                  terraformVersion: ${{ parameters.terraformVersion }}

              - task: ExtractFiles@1
                displayName: 'Extract Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/networking-module-plan/$(Build.BuildNumber).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/modules/networking/'
                  cleanDestinationFolder: true

              - task: TerraformCLI@1
                inputs:
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/modules/networking/'
                  commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
                  environmentServiceName: '$(backendServiceArm)'
                  allowTelemetryCollection: false